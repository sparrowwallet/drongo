plugins {
    id 'java-library'
}

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

def os = org.gradle.internal.os.OperatingSystem.current()
def osName = os.getFamilyName()
if(os.macOsX) {
    osName = "osx"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation ('org.bouncycastle:bcprov-jdk18on:1.80')
    implementation('org.pgpainless:pgpainless-core:1.7.5') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-common'
    }
    implementation ('de.mkammerer:argon2-jvm:2.11') {
        exclude group: 'net.java.dev.jna', module: 'jna'
    }
    implementation ('net.java.dev.jna:jna:5.13.0')
    implementation ('ch.qos.logback:logback-classic:1.5.18') {
        exclude group: 'org.slf4j'
    }
    implementation ('org.slf4j:slf4j-api:2.0.12')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.10.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.0')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

test {
    useJUnitPlatform()
}

processResources {
    doLast {
        delete fileTree("$buildDir/resources/main/native").matching {
            exclude "${osName}/**"
        }
    }
}

